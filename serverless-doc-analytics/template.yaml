AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Process .txt files, store in DynamoDB, notify via SNS

Parameters:
  SnsEmail:
    Type: String
    Description: Email address to receive notifications

Resources:
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "sam-txt-bucket-${AWS::AccountId}-${AWS::Region}"

  DocumentTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: DocumentTextTable
      PrimaryKey:
        Name: document_id
        Type: String

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: DocumentReportTopic

  SNSEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref SnsEmail
      Protocol: email
      TopicArn: !Ref SNSTopic

  # Explicitly define the IAM role for the Lambda function
  DocumentProcessorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow  # Basic logging
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow  # DynamoDB access
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem  # Add other actions as needed
                Resource: !GetAtt DocumentTable.Arn
              - Effect: Allow  # S3 read access
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::${DocumentBucket}/*"
              - Effect: Allow  # SNS publish access
                Action: sns:Publish
                Resource: !Ref SNSTopic

  DocumentProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TxtDocumentProcessor
      CodeUri: document_processor/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 60
      MemorySize: 512
      Role: !GetAtt DocumentProcessorFunctionRole.Arn  # Reference the explicitly defined role
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DocumentTable
          TOPIC_ARN: !Ref SNSTopic
      Events:
        TxtUpload:
          Type: S3
          Properties:
            Bucket: !Ref DocumentBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .txt
    DependsOn:
      - DocumentBucket  # Ensure the bucket is created first
      - DocumentProcessorFunctionRole  # Ensure the role is created first

Outputs:
  UploadBucketName:
    Description: The S3 bucket where you upload .txt files
    Value: !Ref DocumentBucket
  SNSTopicARN:
    Description: SNS Topic ARN for notifications
    Value: !Ref SNSTopic
